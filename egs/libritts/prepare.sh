#!/usr/bin/env bash

set -eou pipefail

nj=15
stage=-1
stop_stage=100

# We assume dl_dir (download dir) contains the following
# directories and files. If not, they will be downloaded
# by this script automatically.
#
#  - $dl_dir/LibriTTS
#      You can download LibriTTS from https://www.openslr.org/60/
#

dl_dir=$PWD/download

dataset_parts="dev-clean test-clean"  # debug
# dataset_parts="auto"  # all

. shared/parse_options.sh || exit 1

# vocab size for sentence piece models.
# It will generate data/lang_bpe_xxx,
# data/lang_bpe_yyy if the array contains xxx, yyy
vocab_sizes=(
  500
)

# All files generated by this script are saved in "data".
# You can safely remove "data" and rerun this script to regenerate it.
mkdir -p data

log() {
  # This function is from espnet
  local fname=${BASH_SOURCE[1]##*/}
  echo -e "$(date '+%Y-%m-%d %H:%M:%S') (${fname}:${BASH_LINENO[0]}:${FUNCNAME[1]}) $*"
}

log "dl_dir: $dl_dir"

if [ "${dataset_parts}" == "auto" ];then
  dataset_parts_opts="--dataset-parts=auto"
else
  dataset_parts_opts=""
  for part in `echo ${dataset_parts} | cut -d" " -f1-`;do
    dataset_parts_opts="${dataset_parts_opts} -p ${part}"
  done
fi

if [ $stage -le 0 ] && [ $stop_stage -ge 0 ]; then
  log "Stage 0: Download data"

  # If you have pre-downloaded it to /path/to/LibriTTS,
  # you can create a symlink
  #
  #   ln -sfv /path/to/LibriTTS $dl_dir/LibriTTS
  #
  if [ ! -d $dl_dir/LibriTTS/dev-clean ]; then
    # lhotse download libritts $dl_dir
    lhotse download libritts ${dataset_parts_opts} $dl_dir
  fi
fi

if [ $stage -le 1 ] && [ $stop_stage -ge 1 ]; then
  log "Stage 1: Prepare LibriTTS manifest"
  # We assume that you have downloaded the LibriTTS corpus
  # to $dl_dir/LibriTTS
  mkdir -p data/manifests
  if [ ! -e data/manifests/.libritts.done ]; then
    lhotse prepare libritts ${dataset_parts_opts} -j $nj $dl_dir/LibriTTS data/manifests
    touch data/manifests/.libritts.done
  fi
fi


if [ $stage -le 2 ] && [ $stop_stage -ge 2 ]; then
  log "Stage 2: Tokenize LibriTTS"
  mkdir -p data/tokenized
  if [ ! -e data/tokenized/.libritts.tokenize.done ]; then
    valle tokenize --dataset-parts "${dataset_parts}" \
        --src-dir "data/manifests" \
        --output-dir "data/tokenized"
  fi
  touch data/tokenized/.libritts.tokenize.done

  log "Stage 2: Prepare LibriTTS train/dev/test"
  if [ ! -e data/tokenized/.libritts.train.done ]; then
    if [ "${dataset_parts}" == "auto" ];then
      # train
      cat <(gunzip -c data/tokenized/libritts_cuts_train-clean-100.jsonl.gz) \
        <(gunzip -c data/tokenized/libritts_cuts_train-clean-360.jsonl.gz) \
        <(gunzip -c data/tokenized/libritts_cuts_train-other-500.jsonl.gz) | \
        shuf | gzip -c > data/tokenized/cuts_train.jsonl.gz

      # dev
      cp data/tokenized/libritts_cuts_dev-clean.jsonl.gz data/tokenized/cuts_dev.jsonl.gz
    else
      # train
      cp data/tokenized/libritts_cuts_dev-clean.jsonl.gz data/tokenized/cuts_train.jsonl.gz
      # dev
      lhotse subset --first 400 data/tokenized/libritts_cuts_test-clean.jsonl.gz \
        data/tokenized/cuts_dev.jsonl.gz
    fi

    # test
    cp data/tokenized/libritts_cuts_test-clean.jsonl.gz data/tokenized/cuts_test.jsonl.gz

    touch data/tokenized/.libritts.train.done
  fi
fi
